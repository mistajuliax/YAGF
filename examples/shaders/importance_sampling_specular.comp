#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout(set = 0, binding = 0) uniform textureCube tex;
layout(set = 0, binding = 1, std140) uniform Matrix
{
  mat4 PermutationMatrix;
};
layout(set = 1, binding = 2) uniform samplerBuffer samples;
layout(set = 2, binding = 3, rgba16f) writeonly uniform image2D output_texture;
layout(set = 3, binding = 4) uniform sampler s;
layout(set = 1, binding = 5, std140) uniform _Size
{
	float size;
    float alpha;
};


// See Real Shading in Unreal Engine 4 (Brian Karis) for formula
float G1_Schlick(float XdotN, float k)
{
	return XdotN / (XdotN * (1.f - k) + k);
}

float G_Smith(float NdotV, float NdotL, float roughness)
{
	float k = roughness * roughness / 2.f;
	return G1_Schlick(NdotV, k) * G1_Schlick(NdotL, k);
}

// Given a Seed from a uniform distribution, returns a half vector direction
// as a theta, phi pair weighted against GGX distribution.
vec2 ImportanceSamplingGGX(vec2 Seeds, float roughness)
{
	float a = roughness * roughness;
	float CosTheta = sqrt((1.f - Seeds.y) / (1.f + (a * a - 1.f) * Seeds.y));
	return vec2(acos(CosTheta), 2.f * 3.14f * Seeds.x);
}


layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

void main(void)
{
    uvec2 id = gl_GlobalInvocationID.xy;
    vec2 uv = id / size;
    vec3 RayDir = 2. * vec3(uv, 1.) - 1.;
    RayDir = normalize((PermutationMatrix * vec4(RayDir, 0.)).xyz);

    vec4 FinalColor = vec4(0.);
    vec3 up = (RayDir.y < .99) ? vec3(0., 1., 0.) : vec3(0., 0., 1.);
    vec3 Tangent = normalize(cross(up, RayDir));
    vec3 Bitangent = cross(RayDir, Tangent);
    float weight = 0.;

    for (int i = 0; i < 1024; i++)
    {
		vec2 ThetaPhi = ImportanceSamplingGGX(texelFetch(samples, i).xy, alpha);
		float Theta = ThetaPhi.x;
		float Phi = ThetaPhi.y;

        vec3 H = cos(Theta) * RayDir + sin(Theta) * cos(Phi) * Tangent + sin(Theta) * sin(Phi) * Bitangent;
        vec3 L = 2 * dot(RayDir, H) * H - RayDir;

        float NdotL = clamp(dot(RayDir, L), 0., 1.);
        FinalColor += textureLod(samplerCube(tex, s), L, 0.) * NdotL;
        weight += NdotL;
    }

    imageStore(output_texture, ivec2(id), FinalColor / weight);
}