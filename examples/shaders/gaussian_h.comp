#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
// From http://http.developer.nvidia.com/GPUGems3/gpugems3_ch40.html

layout(set = 0, binding = 1) uniform texture2D source;
layout(set = 0, binding = 2) writeonly uniform image2D dest;
layout(set = 1, binding = 4) uniform sampler nearest;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
shared vec4 local_src[8 + 2 * 8][2];

void main()
{
	uvec2 DTid = gl_GlobalInvocationID.xy;
	uvec2 Lid = gl_LocalInvocationID.xy;
	const float sigma = 10.;
	local_src[Lid.x][Lid.y] = texture(sampler2D(source, nearest), DTid.xy + vec2(-8., 0.));
	local_src[Lid.x + 8][Lid.y] =  texture(sampler2D(source, nearest), DTid.xy);
	local_src[Lid.x + 16][Lid.y] =  texture(sampler2D(source, nearest), DTid.xy + vec2(8., 0));

	barrier();

	float g0 = 1.0 / (sqrt(2.0 * 3.14) * sigma);
	float g1 = exp(-.5 / (sigma * sigma));
	float g2 = g1 * g1;

	vec4 sum = local_src[Lid.x + 8][Lid.y] * g0;
	g0 *= g1;
	g1 *= g2;
	float total_weight = g0;
	for (int j = 1; j < 8; j++) {
		total_weight += g0;
		sum += local_src[8 + Lid.x - j][Lid.y] * g0;
		total_weight += g0;
		sum += local_src[8 + Lid.x + j][Lid.y] * g0;
		g0 *= g1;
		g1 *= g2;
	}
	imageStore(dest, ivec2(DTid.xy), vec4(sum / total_weight));
}
