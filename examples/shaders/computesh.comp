#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout(set = 0, binding = 0, std140) uniform DATA
{
  float edge_size;
};

layout(set = 0, binding = 1) uniform samplerCube probe;

layout(set = 0, binding = 2, std430) buffer SH
{
  float bL00;
  float bL1m1;
  float bL10;
  float bL11;
  float bL2m2;
  float bL2m1;
  float bL20;
  float bL21;
  float bL22;

  float gL00;
  float gL1m1;
  float gL10;
  float gL11;
  float gL2m2;
  float gL2m1;
  float gL20;
  float gL21;
  float gL22;

  float rL00;
  float rL1m1;
  float rL10;
  float rL11;
  float rL2m2;
  float rL2m1;
  float rL20;
  float rL21;
  float rL22;
};

vec3 getVectorFromCubeAndUV(uint face, vec2 uv)
{
  float u = uv.x, v = uv.y;
  if (face == 0)
    return vec3(1., u, v);
  if (face == 1)
    return vec3(-1., -u, -v);
  if (face == 2)
    return vec3(v, 1., u);
  if (face == 3)
    return vec3(-v, -1., -u);
  if (face == 4)
    return vec3(v, u, 1.);
  if (face == 5)
    return vec3(-v, -u, -1.);
}

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

void main()
{
  bL00 = 0.;
  bL1m1 = 0.;
  bL10  = 0.;
  bL11  = 0.;
  bL2m2  = 0.;
  bL2m1 = 0.;
  bL20 = 0.;
  bL21 = 0.;
  bL22 = 0.;

  gL00 = 0.;
  gL1m1 = 0.;
  gL10 = 0.;
  gL11 = 0.;
  gL2m2 = 0.;
  gL2m1 = 0.;
  gL20 = 0.;
  gL21 = 0.;
  gL22 = 0.;

  rL00 = 0.;
  rL1m1 = 0.;
  rL10 = 0.;
  rL11 = 0.;
  rL2m2 = 0.;
  rL2m1 = 0.;
  rL20 = 0.;
  rL21 = 0.;
  rL22 = 0.;

  for (uint face = 0; face < 6; face++)
  {
    // Can be run on several thread with float atomics...
    for (uint i = 0; i < edge_size; i++)
    {
      for (uint j = 0; j < edge_size; j++)
      {
        vec2 uv = 2. * vec2(i, j) / (edge_size - 1.) - 1.;
        vec3 vect = getVectorFromCubeAndUV(face, uv);
        float d = length(vect);
        // Constant obtained by projecting unprojected ref values
        float solidangle = 2.75f / (edge_size * edge_size * pow(d, 1.5f));
        float x = vect.x, y = vect.y, z = vect.z;

        // constant part of Ylm
        float c00 = 0.282095f;
        float c1minus1 = 0.488603f;
        float c10 = 0.488603f;
        float c11 = 0.488603f;
        float c2minus2 = 1.092548f;
        float c2minus1 = 1.092548f;
        float c21 = 1.092548f;
        float c20 = 0.315392f;
        float c22 = 0.546274f;

        float Y00 = c00 * solidangle;
        float Y1minus1 = c1minus1 * y * solidangle;
        float Y10 = c10 * z * solidangle;
        float Y11 = c11 * x * solidangle;
        float Y2minus2 = c2minus2 * x * y * solidangle;
        float Y2minus1 = c2minus1 * y * z * solidangle;
        float Y21 = c21 * x * z * solidangle;
        float Y20 = c20 * (3 * z * z - 1.) * solidangle;
        float Y22 = c22 * (x * x - y * y) * solidangle;

        vec4 color = texture(probe, vect);
        vec4 SH00 = color * Y00;
        bL00 +=SH00.b;
        rL00 += SH00.r;
        gL00 += SH00.g;

        vec4 SH1minus1 = color * Y1minus1;
        bL1m1 += SH1minus1.b;
        rL1m1 += SH1minus1.r;
        gL1m1 += SH1minus1.g;

        vec4 SH10 = color * Y10;
        bL10 += SH10.b;
        rL10 += SH10.r;
        gL10 += SH10.g;

        vec4 SH11 = color * Y11;
        bL11 += SH11.b;
        rL11 += SH11.r;
        gL11 += SH11.g;

        vec4 SH2minus2 = color * Y2minus2;
        bL2m2 += SH2minus2.b;
        rL2m2 += SH2minus2.r;
        gL2m2 += SH2minus2.g;

        vec4 SH2minus1 = color * Y2minus1;
        bL2m1 += SH2minus1.b;
        rL2m1 += SH2minus1.r;
        gL2m1 += SH2minus1.g;

        vec4 SH20 = color * Y20;
        bL20 += SH20.b;
        rL20 += SH20.r;
        gL20 += SH20.g;

        vec4 SH21 = color * Y21;
        bL21 += SH21.b;
        rL21 += SH21.r;
        gL21 += SH21.g;

        vec4 SH22 = color * Y22;
        bL22 += SH22.b;
        rL22 += SH22.r;
        gL22 += SH22.g;
      }
    }
  }
}